How would you use Java Streams to find the maximum or minimum value from a list of integers?

* To find the maximum or minimum value from a list of integers using Java Streams, 
	we can use the max() and min() methods provided by the Stream API.
	
	// Find maximum value
        Optional<Integer> max = numbers.stream()
                                       .max(Integer::compareTo);
									   
	// Find minimum value
        Optional<Integer> min = numbers.stream()
                                       .min(Integer::compareTo);

* The stream() method is called on the list to obtain a stream of integers.
* For finding the maximum value, the max() method is called with a 
	comparator (Integer::compareTo) to compare integers.
* For finding the minimum value, the min() method is used similarly.
* Both max() and min() return an Optional containing the maximum or minimum value, respectively.
* We check if the Optional contains a value using isPresent(), and if so, 
	retrieve the value using get().
* If the list is empty, the Optional will be empty, so we handle that case as well.

 
Explain the differences between wait(), notify(), and notifyAll() methods in Java.

* wait(), notify(), and notifyAll() are methods in Java used for inter-thread communication 
	in the context of synchronization. 
* They are used to coordinate the execution of multiple threads that share a common resource 
	or are dependent on each other's actions.
	
wait():
	* Purpose: The wait() method is used to temporarily suspend the execution of a thread 
				and wait for another thread to perform a specific action or notify it.
	* Usage: It must be called within a synchronized block or method, as it releases the 
				lock on the object it is called on until it is notified.
	* Parameters: It can be called with an optional timeout parameter, specifying the maximum 
					time the thread should wait for notification before resuming execution.
	* Effects: When called, the thread releases the lock and enters the waiting state until 
				another thread calls notify() or notifyAll() on the same object.
notify():
	* Purpose: The notify() method is used to wake up a single waiting thread that is waiting 
				on the same object it is called on.
	* Usage: It must be called within a synchronized block or method, as it modifies the 
				internal state of the object and may affect other threads waiting or 
				synchronizing on it.
	* Effects: When called, it wakes up one of the threads waiting on the object (if any). 
				The choice of which thread to wake up is arbitrary and depends on the JVM 
				implementation.
notifyAll():
	* Purpose: The notifyAll() method is used to wake up all threads that are waiting on the 
				same object it is called on.
	* Usage: Like notify(), it must be called within a synchronized block or method to modify 
				the internal state of the object safely.
	* Effects: * When called, it wakes up all threads waiting on the object, allowing them to 
					compete for the lock and resume execution. 
			   * It provides a safer alternative to notify() when multiple threads are waiting 
					on the same object, ensuring that all waiting threads are notified.
					
					
What is the Java Memory Model, and why is it important for multithreading?

* The Java Memory Model (JMM) defines how threads interact through memory when executing 
	Java programs. 
* It specifies the behavior of threads regarding memory visibility, synchronization, 
	and atomicity of operations. 
* The JMM ensures that multithreaded Java programs behave predictably and consistently 
	across different platforms and JVM implementations. 

And why the Java Memory Model is important for multithreading:

Memory Visibility:
	* The JMM ensures that changes made by one thread to shared variables are visible to 
		other threads. 
	* Without proper synchronization, changes made by one thread may not be immediately 
		visible to other threads, leading to inconsistencies and errors in the program's 
		behavior.
Synchronization:
	* The JMM provides mechanisms such as synchronized blocks, volatile variables, and 
		explicit locks to synchronize access to shared data among multiple threads. 
	* Synchronization ensures that only one thread can access a critical section of code 
		or modify shared variables at a time, preventing data corruption and race conditions.
Atomicity:
	* The JMM guarantees atomicity for certain operations, such as reads and writes of 
		volatile variables and certain operations on primitive data types. 
	* Atomicity ensures that these operations are indivisible and appear as a single, 
		consistent action to other threads, even in the presence of concurrent execution.
Happens-Before Relationship:
	* The JMM defines the happens-before relationship, which establishes the ordering of 
		memory operations between threads. 
	* This relationship ensures that memory writes made by one thread are visible to another 
		thread if they occur before the second thread's synchronization action 
		(such as acquiring a lock or exiting a synchronized block).
Portability:
	* The JMM provides a portable abstraction of memory behavior across different hardware 
		architectures and JVM implementations. 
	* It allows developers to write multithreaded Java programs that behave consistently 
		regardless of the underlying platform, ensuring portability and interoperability
		
How can you achieve thread safety in Java? Explain various approaches.

* Thread safety in Java refers to the ability of a Java program to execute correctly and 
	predictably in a multithreaded environment, where multiple threads may concurrently
	access and modify shared data. 
* Achieving thread safety is crucial to prevent data corruption, race conditions, and other 
	concurrency issues.
	
There are various approaches to achieve thread safety in Java:

* Synchronization:
	* Use the synchronized keyword to synchronize access to shared resources, methods, or 
		blocks of code. 
	* This ensures that only one thread can access the synchronized code block at a time, 
		preventing concurrent modifications and ensuring thread safety.

* Volatile Variables:
	* Use the volatile keyword to mark variables that are shared among multiple threads. 
	* Volatile variables ensure that changes made by one thread to the variable are immediately 
		visible to other threads. 
	* However, it does not provide atomicity for compound operations.

* Atomic Classes:
	* Use atomic classes such as AtomicInteger, AtomicLong, AtomicBoolean, etc., 
		from the java.util.concurrent.atomic package. 
	* These classes provide atomic operations on variables without the need for synchronization.

* Locks:
	* Use explicit locks such as ReentrantLock or ReadWriteLock from the 
		java.util.concurrent.locks package.
	* Locks provide more fine-grained control over concurrency compared to 
		synchronized blocks and methods.

* Immutable Objects:
	* Design classes to be immutable by making their fields final and providing no mutator methods. 
	* Immutable objects are inherently thread-safe because their state cannot be modified after 
		construction.

* Thread-Local Variables:
	* Use thread-local variables (ThreadLocal) to store thread-specific data. 
	* Each thread has its own independent copy of a thread-local variable, ensuring thread 
		safety without synchronization.

* Concurrent Data Structures:
	* Use concurrent data structures such as ConcurrentHashMap, ConcurrentLinkedQueue, 
		CopyOnWriteArrayList, etc., from the java.util.concurrent package. 
	* These classes are designed for concurrent access and provide thread-safe operations 
		without the need for external synchronization.
		
		
What are Java's volatile variables, and when should you use them?

* In Java, volatile variables are used to indicate that a variable's value may be 
	modified by multiple threads asynchronously. 
* When a variable is declared as volatile, it guarantees that:

	* Changes to the variable's value made by one thread are immediately 
		visible to other threads.
	* Reads and writes of the variable are atomic, meaning they are 
		indivisible and appear as a single, consistent action to other threads.

Here's when you should use volatile variables:

* Visibility Requirements:
	* Use volatile variables when you need to ensure that changes made to a variable's 
		value by one thread are immediately visible to other threads. 
	* This is particularly useful for flags or state variables shared among multiple 
		threads where timely visibility is essential for correct program behavior.
* Simple Flags and Flags in Lock-Free Algorithms:
	* volatile variables are commonly used as flags to indicate the state of a thread or 
		a shared resource. 
	* For example, you might use a volatile boolean variable to signal when a thread 
		should terminate or when a task is complete.
	* In lock-free algorithms or busy-wait loops, volatile variables are often used to coordinate the execution of threads without the need for explicit locking mechanisms.
* As an Optimization Technique:
	* In some cases, volatile variables can be used as an optimization technique to avoid 
		unnecessary synchronization overhead. 
	* For example, if a variable is accessed frequently by multiple threads but rarely 
		modified, using volatile instead of synchronization can improve performance.

However, it's important to note that volatile variables have limitations:
 
* They provide weaker guarantees compared to synchronization using synchronized blocks or locks. 
	While they ensure visibility and atomicity, they do not provide compound atomicity 
	(i.e., a sequence of operations cannot be guaranteed to be atomic).
* They are not suitable for scenarios where multiple threads need to perform compound operations 
	(e.g., read-modify-write operations) on shared variables in a consistent manner.
	
	
What is an ExecutorService, and how does it work in Java?

* An ExecutorService in Java is a higher-level concurrency utility that provides an 
	abstraction for managing and executing asynchronous tasks concurrently. 
* It abstracts away the details of thread creation, management, and pooling, making 
	it easier to work with multithreaded code. 

* Here's how an ExecutorService works in Java:

* Creation:
	* You can create an ExecutorService using one of the factory methods provided 
		by the Executors class. 
	* These factory methods allow you to create different types of executor services, 
		such as fixed-size thread pools, cached thread pools, or scheduled thread pools.

* Submission of Tasks:
	* Once you have created an ExecutorService, you can submit tasks to it for execution. 
	* Tasks are typically represented as instances of the Runnable or Callable interfaces.
	* The execute(Runnable) method is used to submit Runnable tasks for execution, while 
		the submit(Callable) method is used to submit Callable tasks that can return 
		a result or throw an exception.

* Task Execution:
	* The ExecutorService manages a pool of worker threads that are responsible for executing 
		the submitted tasks. 
	* The number of worker threads and their lifecycle are managed by the executor service 
		based on its configuration.
	* When a task is submitted to the ExecutorService, it is placed in a task queue. 
	* The worker threads in the thread pool then dequeue tasks from the queue and execute 
		them concurrently.

* Task Completion:
	* Once a task has been executed by a worker thread, the result (if any) is made available to 
		the caller through a Future object. 
	* A Future represents the result of an asynchronous computation and allows the caller to 
		retrieve the result or handle exceptions thrown during execution.

* Shutdown:
	* After all tasks have been executed, or when the executor service is no longer needed, 
		it should be shut down to release its resources and terminate its worker threads. 
	* This is done by calling the shutdown() or shutdownNow() method on the executor service.
	
	
What is the difference between the submit() and execute() methods of the ExecutorService interface in Java?

* The submit() and execute() methods are both used to submit tasks to an 
	ExecutorService for execution in Java. 
* However, they have differences in terms of the types of tasks they accept 
	and the return values they provide. 
	
* Here's a breakdown of their differences:
	
* Task Type:
	* execute(Runnable task): This method is used to submit tasks that 
								implement the Runnable interface. 
							* Runnable tasks represent units of work that do not return 
							a result or throw checked exceptions.
	* submit(Callable<T> task): This method is used to submit tasks that 
									implement the Callable interface. 
							  * Callable tasks represent units of work that return a 
									result of type T and may throw checked exceptions.
* Return Value:
	* execute(Runnable task): This method does not return any result or future 
								representing the task's execution. 
							* It is a void method and cannot be used to retrieve 
								the result of the task or handle exceptions thrown 
								during execution.
	* submit(Callable<T> task): This method returns a Future<T> object representing 
									the result of the task's execution. 
							  * The Future allows the caller to retrieve the result 
									of the task asynchronously, block until the 
									task completes, or handle exceptions thrown 
									during execution.
* Handling Exceptions:
* execute(Runnable task): If a Runnable task throws an unchecked exception during 
							execution, the exception will be propagated to the 
							thread's uncaught exception handler. 
						* The caller has no direct way to handle exceptions thrown 
							by the task.
* submit(Callable<T> task): If a Callable task throws a checked exception during 
								execution, the exception will be captured and 
								encapsulated within the Future object returned by 
								the submit() method. 
						  * The caller can then use methods such as get() or get
								(long timeout, TimeUnit unit) to retrieve the result 
								of the task and handle any exceptions that occurred 
								during execution.
								

What are the advantages of using a thread pool over creating new threads for each task in Java?

* Using a thread pool offers several advantages over creating new 
	threads for each task in Java. 
	
* Here are some of the key advantages:

* Resource Management:
	* Thread pools manage the creation, reuse, and destruction of threads, 
		which helps conserve system resources such as memory and CPU. 
	* Creating and destroying threads is a relatively expensive operation, 
		and managing them in a pool reduces overhead.

* Improved Performance:
	* Thread pools can improve performance by reusing existing threads for 
		multiple tasks instead of creating new threads each time. 
	* Reusing threads reduces the overhead associated with thread creation 
		and context switching, leading to faster task execution and better 
		overall system performance.

* Concurrency Control:
	* Thread pools provide mechanisms for controlling the degree of concurrency 
		in a system. 
	* By specifying the size of the thread pool (i.e., the number of threads), 
		`you can limit the number of concurrent tasks running simultaneously. 
	* This helps prevent resource contention, excessive context switching, 
		and overload on the system.

* Task Queuing:
	* Thread pools typically include a task queue that holds tasks waiting to 
		be executed. 
	* If all threads in the pool are busy executing tasks, new tasks are queued 
		up until a thread becomes available. 
	* This helps prevent tasks from being lost or rejected due to resource limitations.

* Scalability:
	* Thread pools support scalability by allowing you to adjust the size of 
		the thread pool dynamically based on workload and system conditions. 
	* You can increase or decrease the number of threads in the pool to 
		accommodate changes in workload or system resource availability without 
		impacting application performance.
	
* Centralized Management and Monitoring:
	* Thread pools provide centralized management and monitoring of threads and tasks. 
	* You can configure and monitor thread pools using built-in management and 
		monitoring APIs, making it easier to diagnose and troubleshoot performance 
		issues related to thread utilization and task execution.
		
		
How do you create a Stream in Java?

* In Java, you can create a stream using various methods provided by the Stream 
	interface and utility classes such as StreamSupport. 

* Here are some common ways to create a stream:

1. From a Collection:
	* You can create a stream from a collection using the stream() method 
		defined in the Collection interface.

E.g.
List<String> list = Arrays.asList("a", "b", "c");
Stream<String> stream = list.stream();

2. From an Array:
	* You can create a stream from an array using the Arrays.stream() method.

Eg.
String[] array = {"a", "b", "c"};
Stream<String> stream = Arrays.stream(array);

3. Using Stream.of():
	* You can create a stream from individual elements using the Stream.of() method.

Eg.
Stream<String> stream = Stream.of("a", "b", "c");

4. From a Range of Values:
	* You can create a stream from a range of values using the IntStream.range() 
		or LongStream.range() methods.

E.g.
IntStream stream = IntStream.range(1, 10); // Generates integers from 1 to 9

5. Using Stream.generate():
	* You can create an infinite stream using the Stream.generate() method 
		by providing a Supplier to generate stream elements.

E.g.
Stream<Double> stream = Stream.generate(Math::random); // Generates an infinite stream of random doubles

6. Using Stream.iterate():
	* You can create an infinite stream using the Stream.iterate() method 
		by providing an initial value and a function to generate subsequent elements.

E.g.
Stream<Integer> stream = Stream.iterate(0, n -> n + 2); // Generates an infinite stream of even integers

7. From a BufferedReader:
	* You can create a stream from the lines of a BufferedReader using the 
		lines() method.

E.g.
BufferedReader reader = new BufferedReader(new FileReader("file.txt"));
Stream<String> stream = reader.lines();

8. From an Iterator:
	* You can create a stream from an iterator using the StreamSupport.stream() method.

E.g.
Iterator<String> iterator = list.iterator();
Stream<String> stream = StreamSupport
	.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false);



How do you use Java Streams to collect data into a List?

* In Java Streams, you can use the collect() method along with the Collectors.toList() 
	collector to collect elements from a stream into a List.
	
* The Collectors.toList() collector is a convenient way to collect elements from 
	a stream into a List. It handles the creation of the List, adding elements to 
	it, and returning the result.

* The toList() collector accumulates the elements of the stream into a new ArrayList.


What is the Stream API in Java, and how does it differ from the Collection API?

* The Stream API in Java provides a powerful and functional way to process 
	collections of objects. 
* It allows developers to express complex data processing operations such as 
	filtering, mapping, sorting, and aggregating in a declarative and fluent style.
	
	1.
* The Stream API represents a sequence of elements that can be processed in a 
	pipeline of operations. 
* It allows you to perform aggregate operations on collections, such as filtering, 
	mapping, reducing, and iterating over elements.
	
* The Collection API represents a group of objects, typically stored in memory, 
	that can be manipulated as a single unit. 
* It provides interfaces and classes for working with collections such as lists, 
	sets, queues, and maps.
	
	2.
* Streams are designed to facilitate functional-style programming and support 
	parallel execution. 
* They encourage immutable data structures and stateless operations, making them 
	suitable for concurrent and parallel processing.
	
* Collections allow you to store, retrieve, modify, and iterate over elements in 
	a data structure. 
* They offer methods for adding, removing, and accessing elements, as well as 
	querying the size and contents of the collection.
	
	3.
* Streams are lazy evaluated, meaning intermediate operations are only executed 
	when a terminal operation is invoked. 
* This allows for efficient processing of large data sets and supports lazy 
	evaluation optimizations.
	
* Collections are eager evaluated, meaning all operations are performed 
	immediately when invoked. 
* This can lead to inefficiencies when processing large data sets or performing 
	complex operations.
	
	4.
* Streams provide methods for creating streams from collections, arrays, files, 
	iterators, and other data sources. 
* They also offer a wide range of intermediate and terminal operations for 
	data transformation and aggregation.
	
* The Collection API provides concrete implementations of collection interfaces 
	such as ArrayList, LinkedList, HashSet, TreeSet, HashMap, TreeMap, etc. 
* These implementations offer different trade-offs in terms of performance, 
	memory usage, and concurrency.
	
	
How do you filter a List of objects based on a specific condition using Java Streams?

* To filter a List of objects based on a specific condition using Java Streams, 
	you can use the filter() intermediate operation.
	
* Suppose you have a list of Person objects

* We have a Person class with name and age attributes.
* We create a list of Person objects.
* We use the filter() method on the stream of Person objects to filter out persons 
	older than 30. The lambda expression 'person -> person.getAge() > 30' is the 
	condition used for filtering.
* We collect the filtered persons into a new List using the toList() collector.
* Finally, we print the filtered persons using the forEach() method.

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Person> persons = Arrays.asList(
            new Person("Alice", 25),
            new Person("Bob", 30),
            new Person("Charlie", 35)
        );

        // Filter persons older than 30
        List<Person> filteredPersons = persons.stream()
                                              .filter(person -> person.getAge() > 30)
                                              .toList();

        // Print filtered persons
        filteredPersons.forEach(System.out::println);
    }
}

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + '}';
    }
}



Explain the Single Responsibility Principle and give an example of 
how you have applied it in your code.

* The Single Responsibility Principle (SRP) is one of the five principles of 
	the SOLID design principles in object-oriented programming. 
* It states that a class should have only one reason to change, meaning that a 
	class should have only one responsibility or job.
	
	
* In my code User class that represents a user in a system. 
* This class has methods for managing user data, such as saveUser(), 
	updateUser(), deleteUser(), etc.:
* User class violates the Single Responsibility Principle because it has 
	multiple reasons to change. 
* It is responsible for both managing user data and interacting with the database.	

* I created a UserRepository class responsible for database interactions:

* Now, the User class is responsible only for managing user data, while the 
	UserRepository class is responsible for database interactions. 
* This separation of concerns adheres to the Single Responsibility Principle, 
	making the codebase easier to understand, maintain, and extend.
	

Can you give an example of how you have applied the Dependency Inversion Principle 
in a recent project?

* Dependency Inversion Principle states that high-level modules should not depend on 
	low-level modules but both should depend on abstractions.
	
* In my project I have a PlaylistService class that needs to interact with a data source 
	to perform operations like adding playlists, retrieving playlists, etc. 
* Instead of directly depending on a specific implementation of the data source 
	(e.g., DefaultPlaylistRepository), I have define an interface that abstracts the 
	operations needed by the PlaylistService. 
* Then, I can make DefaultPlaylistRepository implement this interface.

* By defining an interface (PlaylistRepository) that both DefaultPlaylistRepository and 
	PlaylistService depend on, you've applied the Dependency Inversion Principle. 
* Now, PlaylistService depends on an abstraction (the interface) rather than on a concrete 
	implementation (DefaultPlaylistRepository). 
* This makes the system more flexible and easier to maintain because you can easily switch 
	out implementations of PlaylistRepository without modifying PlaylistService. 
* Additionally, it promotes loose coupling between components, which is a key aspect of 
	good software design.
	
	
* What is the 'Don't repeat yourself (DRY)' Principle?

* The "Don't Repeat Yourself" (DRY) principle is a software development principle 
	aimed at reducing repetition of code within a system. 
* It emphasizes that every piece of knowledge or logic should have a single, unambiguous 
	representation within a system. 
* In other words, it encourages developers to avoid duplicating code or logic whenever possible.

* The DRY principle promotes code reusability, maintainability, and readability by encouraging 
	the following practices:

* Code Reuse: Instead of duplicating code, extract common functionality into reusable 
		components, functions, or classes. 
	* This allows the same logic to be used in multiple places within the system.
* Abstraction: Identify patterns or commonalities in code and abstract them into higher-level 
		constructs. 
	* This abstraction helps to eliminate redundancy and allows changes to be made in a 
		single place, propagating the changes across the system.
* Modularization: Organize code into modular components with clear responsibilities. 
	* Each module should encapsulate a specific functionality or feature, making it easier 
		to understand, maintain, and reuse.
* Single Source of Truth: Maintain a single authoritative source for each piece of 
		information or logic within the system. 
	* This ensures consistency and reduces the risk of errors caused by inconsistencies 
		between duplicated code.
* Refactoring: Regularly review code to identify opportunities for refactoring and 
		eliminating duplication. 
	* Refactoring involves restructuring existing code without changing its external 
		behavior, with the goal of improving its quality, readability, and maintainability.
		

* What is the Liskov Substitution Principle and why is it important in 
	object-oriented programming?
	
* The Liskov Substitution Principle (LSP) is one of the five SOLID principles of 
	object-oriented programming (OOP). 
* The principle states that objects of a superclass should be replaceable with objects 
	of a subclass without affecting the correctness of the program.
	
* Liskov Substitution Principle important in OOP

* Design Correctness: By adhering to LSP, you ensure that your class hierarchies are 
		designed correctly. 
	* Subclasses are expected to extend the behavior of their base classes, not to 
		change or break it.
* Polymorphism: LSP enables polymorphism, which is a fundamental concept in OOP. 
	* It allows objects of different classes to be treated uniformly through a common 
		interface or base class, facilitating code reuse and flexibility.
* Behavioral Subtyping: LSP enforces behavioral subtyping, meaning that a subclass should 
		conform to the contract defined by its superclass. 
	* This ensures that client code relying on the interface of the base class will 
		continue to work correctly when given objects of subclasses.
* Code Reusability: LSP promotes code reusability by allowing derived classes to be used 
		interchangeably with their base classes. 
	* This allows you to write generic code that can work with a variety of different 
		types, improving maintainability and reducing duplication.
* Testing and Verification: When classes adhere to LSP, it becomes easier to test and 
		verify their behavior. 
	* Since derived classes are expected to behave similarly to their base classes, 
		you can write tests against the base class's interface and expect them to pass 
		for all subclasses.