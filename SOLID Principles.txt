Q. What is the difference between "tight coupling" and "loose coupling" in software development?
	In software development, "coupling" refers to the degree to which components or modules depend on one another. 
	Tight coupling occurs when modules or components are strongly dependent on one another, such that a change in one 
		component may require changes to be made in other components as well. 
		
	Loose coupling, on the other hand, occurs when components or modules are designed in such a way that they have minimal 
		dependencies on one another, allowing for greater flexibility and easier maintenance.

	Development: Tight coupling can make development more difficult, as changes to one component may require changes 
						to many other components, making it harder to develop new features or modify existing ones. 
						
				Loose coupling makes development easier, as components can be developed independently of one another.
				
	Testing: Tight coupling can make testing more difficult and time-consuming, as changes to one component 
				may require changes to many other components. 
			Loose coupling makes testing easier, as components can be tested independently of one another.
			
	Flexibility: Tight coupling can lead to software that is inflexible, making it difficult to add new features or make changes. 
					Loose coupling, on the other hand, allows for greater flexibility and easier maintenance.




Q. Explain the SOLID principles and how they can help you write better code. 
	The SOLID principle is a set of guidelines for writing high-quality and maintainable code.
	
	SOLID is an acronym for each principle that focuses on a specific aspect of software design, 
		with the ultimate goal of making code more flexible, scalable, and easier to maintain.
		
	Single Responsibility Principle (SRP): This principle states that a class or module should have only one reason to change. 
									It should have a single responsibility. By following this principle, you can make your code 
									more modular, easier to understand, and easier to test. 
									A class with a single responsibility is also less likely to change, which means that changes 
									to one part of the system won't impact other parts.
									
	Open-Closed Principle (OCP): This principle states that a module or class should be open for extension but closed for modification. 
							In other words, you should be able to add new functionality to a module without changing its existing code. 
							This can be achieved through the use of interfaces or abstract classes, which define a standard way for 
							modules to interact with one another. By following this principle, you can make your code more modular, 
							extensible, and easier to maintain.
							
	Liskov Substitution Principle (LSP): This principle states that objects of a superclass should be replaceable with objects of a 
							subclass without affecting the correctness of the program. If a module expects an object of a certain type, 
							it should be able to work with any object that is a subclass of that type. By following this principle, 
							you can ensure that your code is more flexible and scalable.
							
	Interface Segregation Principle (ISP): This principle states that a module should not be forced to depend on interfaces it does not use. 
							You should define small, specific interfaces that only include the methods that are actually needed by the module. 
							By following this principle, you can make your code more modular and easier to test
							
	Dependency Inversion Principle (DIP): This principle states that modules should depend on abstractions, not on concretions. 
							You should define interfaces or abstract classes that describe the behavior of a module, rather than 
							relying on specific implementations. By following this principle, you can make your code more modular, 
							extensible, and easier to test.







Q. What is the Dependency Inversion Principle (DIP) and how does it promote loose coupling between classes?
	Dependency Inversion Principle (DIP) helps to reduce tight coupling between modules or classes by proposing the use of abstractions 
		and interfaces to define the behavior of the modules or classes, making the code more flexible and easier to maintain.
	
	A common use case for the Dependency Inversion Principle is in payment systems, where the payment module can depend on an abstract 
		interface for the payment gateway, rather than directly on the details of the gateway implementation. This makes it easier to switch 
		out different payment gateway providers without changing any of the payment module's codes.

	The Dependency Inversion Principle (DIP) is one of the five principles of the SOLID design principles for object-oriented software development.
	It is a design principle in object-oriented programming that suggests that high-level modules should not depend on low-level modules. 
	Instead, both should depend on abstractions. 
	Abstractions should not depend on details. 
	Details should depend on abstractions. 
	In simpler terms, this principle suggests that the components of a system should depend on abstractions, rather than concrete implementations.

	Let's say, we have an e-commerce website that currently uses Payment Provider A. However, we now want to add support for 
		Payment Provider B without modifying the high-level code that interacts with the Payment gateway. 
		Using Dependency Inversion Principle, we can create an interface for Payment gateway 
		interactions and two concrete implementations of this interface: one for Payment Provider 
		A and another for Payment Provider B. 
	When we need to switch Payment providers, we simply use the appropriate concrete implementation for the new provider, without 
	changing the high-level code.
	e.g. For example, let's say we want to switch from Payment Provider A to Payment Provider B. We simply update the configuration 
		file to use the concrete implementation for Payment Provider B, and the high-level code that interacts with the 
		Payment gateway remains the same.                                                                                                                                                                                                                                          This way, we can switch between payment providers without changing the high-level code that uses the Payment gateway.





Q. What is the Open-Closed Principle (OCP) and how can you apply it to your code to make it more maintainable? 
	The Open/Closed Principle encourages developers to write code that is easy to modify and extend, without breaking existing functionality.
		let's say we have a module in our codebase that calculates the price of a product based on its attributes. If we want to add a new 
		attribute to the calculation, we should be able to do so without modifying the existing code. This way, we can extend the behavior of 
		the module without breaking any existing functionality that depends on it.

	The Open-Closed Principle (OCP) is one of the SOLID principles of software design, which states that software entities 
		(classes, modules, functions, etc.) should be open for extension, but closed for modification.
	
	This means that once a module, class, or function is written, it should be closed for modification, but it should be 
		open to extension by adding new features, without changing its existing code. In other words, we should be able to add 
		new functionality to a module, without modifying the existing code of that module.

	It is used in developing a software system that allows for easy extension without modification of its core code. 
	
	Letâ€™s say, we have Content Management System and want to add a new feature in the content management system that enables users 
		to share their posts on social media. We could create a plugin interface called "SocialMediaPlugin" that specifies the methods 
		that the content management system will use to interact with the plugin, such as "shareOnFacebook" and "shareOnTwitter". 
	
	Any developer who wants to create a plugin for this feature would need to implement the "SocialMediaPlugin" interface, 
		ensuring that their plugin can be integrated into the content management system without modifying its core code. 
		Now the content management system can allow third-party developers to create and sell their own plugins, which can be 
		easily integrated into the system without affecting its core functionality.


