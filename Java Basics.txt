Q. What are the differences between C++ and Java in terms of programming features? 
	C++ and Java are programming languages used to develop software applications. 
	C++ is often used for low-level programming and system-level development, 
	while Java is often used for high-level development and enterprise-level applications.
	
Memory management & Performance: In C++, programmers have more control over memory management through the use 
				of pointers and manual memory allocation and de-allocation. 
				In contrast, Java uses automatic memory management through garbage collection.
				C++ is generally faster than Java due to its direct memory management and lower-level access to hardware.

Platform dependence: C++ code is compiled into machine code, which is specific to the processor and operating 
					system of the machine it is compiled on. Java, on the other hand, is compiled into bytecode, 
					which is interpreted by the Java Virtual Machine (JVM) and is platform-independent.

Portability: Java is designed to be highly portable, with Java programs running on any platform that has a JVM installed. 
			C++, on the other hand, can be more platform-dependent, with different compilers and libraries required 
			for different platforms.
			
			
Q. Why is main method declared as static in Java?
	The reason for declaring the main method as static in Java is that it allows the method to be called without 
		creating an instance of the class. 
	This is because the main method serves as the entry point for the Java program, and it needs to be executed 
		before any object of the class is created.

	This simplifies the program structure and makes it easier to launch the Java application. Additionally, the 
		static keyword allows the main method to be called by the Java Virtual Machine (JVM) which can improve 
		performance and reduce memory usage.

	Overall, the static keyword is used to indicate that the main method belongs to the class, rather than to an 
		instance of the class, and that it can be called directly without the need for an object to be created.


Limited access to instance variables: When the main method is declared as static, it only has access to static variables and methods. 
									If you need to access instance variables or methods, you would need to create an 
									instance of the class first.
Difficulty in extending: When the main method is static, it makes it harder to extend the functionality of the class. 
						You cannot override a static method, so any child class will be forced to use the same main 
						method as the parent class.

Q. Explain Wrapper Classes.
	There are several reasons why wrapper classes are used in Java:

	To make primitive types into objects: Wrapper classes provide a way to treat primitive types as objects, which 
		allows them to be used in situations where objects are required, such as in collections, which can only hold objects.

	To provide methods for working with primitive types: Wrapper classes provide methods that allow you to work with 
		primitive types, such as converting between different types, comparing values, and performing mathematical operations.

	To work with objects: Wrapper classes are used to represent primitive data types as objects. This is useful because 
		many Java API methods only work with objects, not primitive data types.

	In Java, a wrapper class is a class that wraps a primitive data type in an object. 
	There are eight primitive data types in Java: byte, short, int, long, float, double, char, and boolean. 
	
	Wrapper classes provide a way to use these primitive data types as objects.
	
	Choose the primitive data type you want to create a wrapper class for. For example, if  
		you want to create a wrapper class for the int primitive data type, you would create a  
		class called Integer.

	Integer variableName;
			 
	Similarly, you can create wrapper classes for Float,Double,String etc.        
		   
	Application:
	In QMoney project, we have used wrapper class String to store the symbols of a JSON file.


Q. When to use == vs .equals?
	Both equals() and == are used for comparison, but they serve different purposes

	The equality operator (==) compares object references, whereas the equals() method compares the values inside the objects.

	The equality operator (==) is used to compare primitive data types, as well as object references, whereas the equals() 
		method is only used for comparing objects.

	The equality operator (==) returns true if the two operands refer to the same object in memory, whereas the equals() method 
		returns true if the two objects have the same values.

	n general, the equality operator (==) is used for comparing primitive data types and checking if two references point to the 
		same object in memory. The equals() method, on the other hand, is used to compare the values inside objects, 
		such as strings or custom classes.

	It is important to note that the implementation of the equals() method can vary depending on the class, and custom classes 
	should override the default implementation of equals() to ensure that it compares the values inside the objects in a meaningful way.
	
	
Q. How interfaces differ from abstract classes in Java? 
	In Java, an interface is a contract specifying what a class should do, while an abstract class is a partially 
		implemented class that cannot be instantiated on its own. 
	Both are used for abstraction and modularity in Java programming.

	1) Implementation: Both interfaces and abstract classes can define a set of actions for a class to take. 
				However, interfaces only have abstract methods, while abstract classes can have both abstract and concrete methods.

	2) Multiple inheritance: A class can implement multiple interfaces, but it can only extend one abstract class.

	3) Abstraction level: Interfaces provide full abstraction, as they do not provide any implementation details for their methods. 
						Abstract classes provide partial abstraction and can also include reusable code in the form of concrete methods.


Q. Why Java doesn't support multiple inheritance using class? 
	Multiple inheritance is a feature of some object-oriented programming languages, including C++ and Python, that allows a subclass 
		to inherit properties and methods from multiple super classes. 
	This enables code reuse and organization by allowing a subclass to inherit from multiple classes, but it can also lead 
		to complexity and potential conflicts. Java does not support multiple inheritance, 
		but interfaces can be used to achieve similar functionality. 

	1) Complexity: Multiple inheritance can lead to complex and ambiguous class hierarchies. 
					Such as “Diamond Problem” where a subclass inherits from two or more parent classes that have a common ancestor. 
				Java was designed with simplicity and ease of use in mind. 
				Supporting multiple inheritance would make the language more complex.
	2) Interface implementation: Java already provides interfaces as a way to implement multiple inheritance-like behaviour. 
						Using interfaces, a class can inherit from multiple interfaces, and each interface 
						can provide a set of methods that the class must implement. 
					This approach allows Java to achieve some of the benefits of multiple inheritance without the complexity and ambiguity.


Q. How is Abstraction different from Encapsulation? 
	Encapsulation and abstraction are key concepts in Java. Encapsulation enables bundling data and methods while restricting 
		access to the internal details. 
	Abstraction creates a simplified representation of a complex system, hiding implementation details.

	1)Implementation: Abstraction is implemented through abstract classes and interfaces, which define a 
						contract or a set of rules that a class must follow. 
					Encapsulation is implemented through access modifiers (public, private, protected) that 
						control the visibility and accessibility of data and methods in a class.
						
	2)Focus: Abstraction is focused on creating a simplified and generalized view of a system that can be easily 
				understood and used by others, whereas encapsulation is focused on hiding the complexity of 
				the internal implementation of a class and providing a clean and simple interface to interact with the class.
				
	3)Benefits: Both abstraction and encapsulation provide benefits to software development. 
				Abstraction helps to reduce complexity, improve code modularity, and facilitate code reuse by 
					providing a simplified and generalized view of a system. 
				Encapsulation helps to protect the internal implementation of a class, prevent unintended modifications 
					to data, and improve code maintainability by making changes to a class's internal implementation easier and safer.



Q. Explain Polymorphism in Java. 
	Polymorphism in Java is needed for code reuse, flexibility, and abstraction. 
	It enables objects to be treated as if they are of the same type, making code more efficient and easier to maintain. 
	It allows for the addition of new classes and objects without requiring changes to existing code, and it 
		abstracts away implementation details, focusing on behaviour instead.
	
	Polymorphism is a concept in object-oriented programming that allows objects of different classes to be treated as 
		if they are of the same type. 
	This means that a single method can be written to handle multiple different types of objects, making code more 
		efficient and easier to maintain.
	
	Polymorphism is used in Java through inheritance and interfaces. Inheritance allows a subclass to inherit properties 
		and methods from its superclass and allows objects of the subclass to be treated as objects of the superclass. 
	Interfaces define a contract for methods that a class must implement, enabling objects of different classes to be 
		treated as if they implement the same interface.
	
	
Q. What is difference between String, StringBuffer and StringBuilder?
	String is an object representing a sequence of characters, which is immutable and widely used.
	StringBuffer in Java is a class used to represent mutable sequences of characters.
	StringBuilder in Java is a class used to represent mutable sequences of characters, similar to StringBuffer
	
	1) Immutability: String is immutable, which means that once a string is created, it cannot be modified. In contrast, 
					StringBuffer and StringBuilder are mutable, which means that their contents can be modified 
					without creating new objects.
					
	2) Thread safety: String and StringBuilder are not thread-safe, which means that they can produce incorrect results 
						if accessed concurrently by multiple threads. 
					StringBuffer, on the other hand, is thread-safe, which means that it can be safely used in multi-threaded programs.
					
	3) Performance: StringBuffer and StringBuilder are generally faster than String for string manipulation tasks, 
						especially when concatenating multiple strings. 
					StringBuffer is slower than StringBuilder due to its thread-safety mechanisms, but can still be faster 
						than String in some cases due to its mutable nature.



Q. How to create a String which is not stored in String Pool?
	To create a String object that is not stored in the string pool, you can use the new keyword to explicitly create a 
		new instance of the String class, like this:
			String str = new String("Hello, World!");
	This creates a new instance of the String class on the heap, which is separate from the string pool. 
	Since the string literal is passed as an argument to the String constructor, it is not added to the string pool 
		and a new object is created every time this code is executed.

	1) Memory efficiency: Creating a new instance of the String class using the new keyword can use more memory than 
							creating a string literal, especially if you are creating many instances of the String class. 
						This can cause performance issues and waste memory if you create a large number of String objects unnecessarily.
						
	2) String immutability: Just like with string literals, String objects created using the new keyword are also immutable. 
							This means that any modification to the String object creates a new String object on the heap. 
							Therefore, it is important to keep this in mind when using the new keyword to create String objects, 
								and avoid unnecessary string operations that can create additional objects on the heap.



Q. How do you reverse a String in Java without using any built-in methods? 
	To reverse a String in Java without using any built-in methods, one of the approaches is:
	a- Convert the string to a character array
	b- Swap the characters at the beginning and end of the array, then move towards the center of the array
	c- Convert the character array back to a String

	1) Strings are immutable: Strings in Java are immutable, which means that they cannot be modified once they are created. 
							Therefore, if you need to reverse a string, you must first convert it to a mutable data type, 
								such as a character array, before modifying it 
	2) Another thing to keep in mind is that the approach of converting the string to a character array and swapping 
			the characters may not work correctly for strings that contain Unicode characters, such as non-Latin characters or emojis. 
		This is because some Unicode characters are represented by more than one byte, and swapping their bytes may result 
			in an invalid character or an incorrect representation. 
		In such cases, it is recommended to use a more advanced algorithm, such as using a StringBuilder or StringBuffer, 
			which can handle Unicode characters correctly.



Q. What is the difference between the concat() method and the '+' operator for concatenating Strings in Java?
	In Java, the concat() method and the + operator can be used to concatenate two or more strings.
	The concat() method is a method of the String class that takes a single argument, which is the string to be 
		concatenated to the end of the current string. 
	The method returns a new string that is the concatenation of the current string and the argument.
		String result = str1.concat(str2);
	The + operator can also be used to concatenate strings. 
	When used with two strings, the + operator concatenates them together to form a new string. 
	Here's an example: String result = str1 + str2;

	1) Return value: The concat() method returns a new string that is the concatenation of the original string and 
						the argument, while the + operator creates a new string object that is the concatenation of the two strings. 
					This means that the concat() method may be more memory-efficient when concatenating large 
						numbers of strings because it doesn't create new objects for each concatenation.
						
	2) Performance: The + operator is generally faster than the concat() method when concatenating a small number of strings. 
					This is because the + operator is optimized by the compiler and can be executed more efficiently than 
						calling the concat() method. 
					However, when concatenating large numbers of strings, the concat() method may be faster 
						because it avoids creating new objects.
						
	3) Syntax: The concat() method is a method of the String class, so it must be called on a String object. 
				This means that you need to create a String object before you can use the concat() method. 
				On the other hand, the + operator can be used with string literals or String objects, so it can be used more flexibly.

	
Q. How do you choose between ArrayList and LinkedList?
	ArrayList and LinkedList are two common data structures used in programming to store and manipulate collections of objects.                                                                                                                                        
	ArrayList is a dynamic array implementation in Java that allows you to add or remove elements at runtime.                                                                                                                                                               
	LinkedList in Java is a data structure that consists of a sequence of elements, where each element points to the next one using a reference. 

	If memory usage is a concern, LinkedList may be preferable for large or dynamically changing collections, 
		while ArrayList may be better for small or fixed-size collections.
	If the collection contains primitive types, ArrayList may be more efficient due to the overhead of creating 
		and managing node objects in LinkedList.
	If the collection will be frequently sorted, ArrayList may be more efficient due to its ability to use 
		binary search algorithms.


Q. In which scenarios we should use Comparator over the Comparable? 
	Comparator and Comparable are interfaces that allow you to define custom comparison logic for objects. 
	Comparable is an interface that is implemented by a class to provide natural ordering of its objects, 
		while Comparator is an interface that defines a comparison function that can be used to order objects 
		of a class that does not implement Comparable or when a different ordering is needed.

	When you need to define multiple sorting orders for the same class: Unlike Comparable, which provides only 
		one natural ordering for a class, Comparator allows you to define multiple comparison functions 
		that can be used to sort objects based on different criteria.
		
	When you want to sort objects based on fields or properties that are not part of the object's natural ordering: 
		In some cases, you may want to sort objects based on fields or properties that are not part of their natural ordering. 
		Using a Comparator allows you to define a comparison function that takes these fields or properties into account.
	When you want to sort objects that are not your own classes: If you need to sort objects that you cannot modify or that do 
			not implement the Comparable interface, you can use a Comparator to define a custom comparison function for these objects.



Q. How does the hashCode() and equals() methods impact the behavior of objects in a Collection? 
	The hashCode() method returns an integer value that is used by hash-based collections to determine the bucket location for an object. 
	The equals() method is used to check whether two objects are equal or not.
	
	If you override the equals() method for a class, you should also override the hashCode() 
		method to ensure that equal objects have the same hash code.
		
	If you store two objects in a HashSet that have the same state but do not override the equals() and hashCode() methods, 
		the HashSet will treat them as distinct objects and add both to the set.
		
	If you use an object as a key in a HashMap or Hashtable and you have not overridden the equals() and hashCode() methods, 
		the map may not be able to find the value associated with that key.

	Consistency: hashCode() and equals() should return the same result for an object with the same state, 
		and not change unexpectedly i.e. methods should not change unexpectedly if an object's state has not changed.
		
	e.g. For example, if two objects have the same state, they should have the same 
		hash code and be considered equal by the equals() method every time. If the hashCode() or equals() 
		methods return different results for the same object at different times, it can lead to unexpected 
		behavior in collections.
		
	Override both methods: The hashCode() and equals() methods are used together by collections such as HashSet and HashMap.
			If you override only one method, you risk breaking the contract between the two methods. 
			Therefore, to ensure consistency and avoid unexpected behavior, 
				it's important to override both methods if you override either one.



Q. What is an iterator in Java, and what advantages does it offer over using a loop to iterate over a collection?
	An iterator is a Java interface that provides a way to access the elements of a collection one by one, 
		without exposing the underlying implementation of the collection. 
	It allows you to iterate over a collection in a forward direction only and provides methods to check 
		if there are more elements in the collection, get the next element in the collection, and 
		remove an element from the collection.
	Iterator provides a more abstract and flexible way to iterate over the elements of a collection. 
	This means that you can use the same code to iterate over different types of collections, 
		rather than having to write separate loops for each type of collection. 
	It can be more efficient than using a loop in some cases. For example, if you are 
		iterating over a large collection and need to remove elements as you go, using an 
		iterator can be faster than using a loop, since it avoids having to shift elements in the underlying array. 
	It can help you avoid common mistakes when iterating over collections, such as modifying the collection while iterating over it. 
	Iterators provide a safe and well-defined way to remove elements from a collection while iterating over it, 
		which can help you avoid errors and make your code more robust.

	When using an iterator to modify a collection, it is important to use the iterator's own remove() method to avoid concurrency issues. 
	If you modify the collection directly, while iterating over it, it can lead to an inconsistent or unpredictable state.
	
	Make sure to check if there are more elements in the collection before trying to retrieve the next element using the iterator's hasNext() method. 
	If you don't check for more elements, you can get a NoSuchElementException at runtime.


